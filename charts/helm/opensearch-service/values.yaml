dashboards:
  enabled: false
  dockerImage: opensearchproject/opensearch-dashboards:2.19.2
  ## Specifies the image pull policy. Can be "Always" or "IfNotPresent" or "Never".
  ## Default to "Always".
  imagePullPolicy: ""
  imagePullSecrets: []
  updateStrategy: "Recreate"
  replicas: 1

  resources:
    requests:
      cpu: "100m"
      memory: "512M"
    limits:
      cpu: "100m"
      memory: "512M"

  opensearchHosts: ""

  # A list of secrets and their paths to mount inside the pod
  # This is useful for mounting certificates for security and for mounting
  # the X-Pack license
  secretMounts: []
#    - name: certs
#      secretName: dashboard-certs
#      path: /usr/share/dashboards/certs

  extraEnvs: []
#    - name: "NODE_OPTIONS"
#      value: "--max-old-space-size=1800"

  envFrom: []

  extraVolumes: []
#    - name: extras
#      emptyDir: {}

  extraVolumeMounts: []
#    - name: extras
#      mountPath: /usr/share/extras
#      readOnly: true

  extraInitContainers: []

  extraContainers: []

  ingress:
    enabled: false
    annotations: {}
    # kubernetes.io/tls-acme: "true"
    className: ""
    hosts:
      - host: chart-example.local
        paths:
          - path: /
    tls: []
#      - secretName: chart-example-tls
#        hosts:
#          - chart-example.local

  service:
    type: ClusterIP
    port: 5601
    loadBalancerIP: ""
    nodePort: ""
    labels: {}
    annotations: {}
    loadBalancerSourceRanges: []
    # 0.0.0.0/0
    httpPortName: http

  config: {}
#    # Default OpenSearch Dashboards configuration from docker image of Dashboards
#    opensearch_dashboards.yml:
#      server:
#        name: dashboards
#        host: 0.0.0.0
#        # Dashboards TLS Config (Ensure the cert files are present before enabling SSL)
#        ssl:
#          enabled: true
#          key: /usr/share/opensearch-dashboards/certs/dashboards-key.pem
#          certificate: /usr/share/opensearch-dashboards/certs/dashboards-crt.pem
#      # Determines how dashboards will verify certificates (needs to be none for default opensearch certificates to work)
#      opensearch:
#        ssl:
#          certificateAuthorities: /usr/share/opensearch-dashboards/certs/dashboards-root-ca.pem
#          # if utilizing custom CA certs for connection to opensearch, provide the CA here

  nodeSelector: {}

  tolerations: []

  affinity: {}

  priorityClassName: ""

  opensearchAccount:
    secret: ""
    keyPassphrase:
      enabled: false

  labels: {}

  hostAliases: []
#    - ip: "127.0.0.1"
#      hostnames:
#      - "foo.local"
#      - "bar.local"

  serverHost: "0.0.0.0"

  serviceAccount:
    ## Specifies whether a ServiceAccount should be created
    create: true
    ## The name of the ServiceAccount to use.
    ## If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podSecurityContext: {}

  securityContext: {}

global:
  clusterName: opensearch

  cloudIntegrationEnabled: false

  imagePullSecrets: []

  restrictedEnvironment: false

  externalOpensearch:
    enabled: false
    url: ""
    username: ""
    password: ""
    nodesCount: 3
    dataNodesCount: 3
    tlsSecretName: ""
    applyConfig: false
    config:
      action.auto_create_index: "false"
      compatibility.override_main_response_version: "false"

  tls:
    enabled: false
    cipherSuites: []
    renewCerts: true
    generateCerts:
      enabled: true
      certProvider: cert-manager
      durationDays: 365
      clusterIssuerName: ""

  velero:
    preHookBackupEnabled: true
    timeout: "600s"

  psp:
    create: false

  disasterRecovery:
    image: ghcr.io/netcracker/disaster-recovery-daemon:main
    tls:
      enabled: true
      certificates:
        crt: ""
        key: ""
        ca: ""
      secretName: ""
      cipherSuites: []
      subjectAlternativeName:
        additionalDnsNames: []
        additionalIpAddresses: []
    httpAuth:
      enabled: false
      smSecureAuth: false
      smNamespace: "site-manager"
      smServiceAccountName: ""
      restrictedEnvironment: false
      customAudience: "sm-services"
    mode: ""
    indicesPattern: "*"
    remoteCluster: ""
    siteManagerEnabled: true
    siteManagerApiGroup: "qubership.org"
    timeout: 600
    afterServices: []
    replicationWatcherEnabled: false
    replicationWatcherIntervalSeconds: 30
    serviceExport:
      enabled: false
      region: ""
    resources:
      limits:
        cpu: "100m"
        memory: "128Mi"
      requests:
        cpu: "25m"
        memory: "32Mi"
  customLabels: {}
  securityContext: {}

operator:
  dockerImage: ghcr.io/netcracker/qubership-opensearch-operator:1.14.21
  replicas: 1
  reconcilePeriod: 60

  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []

  affinity: {}
#    podAntiAffinity:
#      requiredDuringSchedulingIgnoredDuringExecution:
#        - labelSelector:
#            matchExpressions:
#              - key: component
#                operator: In
#                values:
#                  - opensearch-service-operator
#          topologyKey: "kubernetes.io/hostname"

  # used to assign priority to the OpenSearch Operator pod
  # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  priorityClassName: ""

  customLabels: {}
  securityContext: {}

  resources:
    requests:
      memory: 128Mi
      cpu: 25m
    limits:
      memory: 128Mi
      cpu: 100m

opensearch:
  ## Used when deploying hot/warm architecture. Allows second aliased deployment to find cluster.
  ## Default {{ template opensearch.fullname }}-discovery.
  discoveryOverride: ""
  compatibilityModeEnabled: false
  gcLoggingEnabled: false
  performanceAnalyzerEnabled: true
  rollingUpdate: false
  readinessTimeout: "800s"
  securityConfig:
    enabled: true
    path: "/usr/share/opensearch/config/opensearch-security"
    authc:
      basic:
        username: ""
        password: ""
      oidc:
        subject_key: preferred_username
        openid_connect_url: ""
        roles_key: preferred_username
    actionGroupsSecret: ""
    configSecret: ""
    internalUsersSecret: ""
    rolesSecret: ""
    rolesMappingSecret: ""
    tenantsSecret: ""
    # The following option simplifies securityConfig by using a single secret and specifying the respective secrets in the corresponding files instead of creating different secrets for config,internal users, roles, roles mapping and tenants
    # Note that this is an alternative to the above secrets and shouldn't be used if the above secrets are used
    config:
      securityConfigSecret: ""
      data: {}
#        config.yml: |-
#        internal_users.yml: |-
#        roles.yml: |-
#        rolesMapping.yml: |-
#        tenants.yml: |-
    enhancedSecurityPlugin:
      enabled: true
    ldap:
      enabled: false
      enableSsl: false
      search:
        roleSearchEnabled: false

  ## securityContext to apply to the pod. Allows for running as non-root
  securityContextCustom: {}
#    fsGroup: 1000
#    runAsUser: 1000
#    runAsGroup: 1000

  extraEnvs: []

  extraInitContainers: []
#    - name: do-something
#      image: busybox
#      command: ['do', 'something']

  extraVolumes: []
#    - name: extras
#      emptyDir: {}

  extraVolumeMounts: []
#    - name: extras
#      mountPath: /usr/share/extras
#      readOnly: true

  initContainer:
    dockerImage: busybox:1.35.0

  ## Set optimal sysctl. This requires privilege. Can be disabled if
  ## the system has already been preconfigured.
  sysctl:
    enabled: false

  ## init container to chown the mount volume. not necessary if setting a
  ## fsGroup in the securityContext
  fixmount:
    enabled: false
    securityContext: {}

  tls:
    enabled: true
    cipherSuites: []
    generateCerts:
      enabled: true
    subjectAlternativeName:
      additionalDnsNames: []
      additionalIpAddresses: []
    ## TLS is mandatory for the transport and admin layer and can not be disabled
    transport:
      certificates:
        crt: ""
        key: ""
        ca: ""
      existingCertSecret: ""
    rest:
      certificates:
        crt: ""
        key: ""
        ca: ""
      existingCertSecret: ""
    admin:
      certificates:
        crt: ""
        key: ""
        ca: ""
      existingCertSecret: ""

  master:
    enabled: true
    replicas: 3
    updateStrategy: "RollingUpdate"

    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      enabled: true
      ## A manually managed Persistent Volume and Claim
      ## Requires persistence.enabled: true
      ## If defined, PVC must be created manually before volume will be bound
      ##
      existingClaim: ""

      ## The subdirectory of the volume to mount to, useful in dev environments
      ## and one PV for multiple services.
      ##
      subPath: ""

      ## OpenSearch master Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS & OpenStack).
      ##
      storageClass: "-"

      # The List of predefined Persistent Volumes for the OpenSearch master. Should be specified as yaml list.
      # OpenSearch nodes take name of these Persistent Volumes in order.
      persistentVolumes: []

      nodes: []

      accessModes:
        - ReadWriteOnce
      size: 5Gi
      annotations: {}

    resources:
      requests:
        cpu: 300m
        memory: 2Gi
      limits:
        cpu: 1
        memory: 4Gi
    javaOpts: "-Xms1024m -Xmx1024m"
    podDisruptionBudget:
      enabled: false
      minAvailable: 1
    readinessProbe: {}
    livenessProbe:
      tcpSocket:
        port: transport
      initialDelaySeconds: 120
      periodSeconds: 20
      failureThreshold: 10
    startupProbe: {}
    imagePullSecrets: []
    nodeSelector: {}
    tolerations: []
    ## Anti-affinity to disallow deploying client and master nodes on the same worker node
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchLabels:
                role: master
    podAnnotations: {}

    # used to assign priority to the OpenSearch master pods
    # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
    priorityClassName: ""

    extraInitContainers: []
#      - name: do-something
#        image: busybox
#        command: ['do', 'something']

    extraContainers: []
#      - name: do-something
#        image: busybox
#        command: ['do', 'something']
    customLabels: {}

  arbiter:
    enabled: false
    replicas: 1
    updateStrategy: "RollingUpdate"

    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      enabled: true
      ## A manually managed Persistent Volume and Claim
      ## Requires persistence.enabled: true
      ## If defined, PVC must be created manually before volume will be bound
      ##
      existingClaim: ""

      ## The subdirectory of the volume to mount to, useful in dev environments
      ## and one PV for multiple services.
      ##
      subPath: ""

      ## OpenSearch arbiter Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS & OpenStack).
      ##
      storageClass: "-"

      # The List of predefined Persistent Volumes for the OpenSearch arbiter. Should be specified as yaml list.
      # OpenSearch nodes take name of these Persistent Volumes in order.
      persistentVolumes: []

      nodes: []

      accessModes:
        - ReadWriteOnce
      size: 5Gi
      annotations: {}

    resources:
      requests:
        cpu: 250m
        memory: 2Gi
      limits:
        cpu: 1
        memory: 4Gi
    javaOpts: "-Xms1024m -Xmx1024m"
    readinessProbe: {}
    livenessProbe:
      tcpSocket:
        port: transport
      initialDelaySeconds: 90
      periodSeconds: 20
      failureThreshold: 5
    startupProbe: {}
    imagePullSecrets: []
    nodeSelector: {}
    tolerations: []
    ## Anti-affinity to disallow deploying client and master nodes on the same worker node
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchLabels:
                role: master
    podAnnotations: {}

    # used to assign priority to the OpenSearch arbiter pods
    # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
    priorityClassName: ""

    extraInitContainers: []
#      - name: do-something
#        image: busybox
#        command: ['do', 'something']

    extraContainers: []
#      - name: do-something
#        image: busybox
#        command: ['do', 'something']
    customLabels: {}

  data:
    enabled: true
    ## Enables dedicated StatefulSet for data. Otherwise, master nodes are as data storage.
    dedicatedPod:
      enabled: false
    replicas: 3
    updateStrategy: "RollingUpdate"

    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      enabled: true
      ## A manually managed Persistent Volume and Claim
      ## Requires persistence.enabled: true
      ## If defined, PVC must be created manually before volume will be bound
      ##
      existingClaim: ""

      ## The subdirectory of the volume to mount to, useful in dev environments
      ## and one PV for multiple services.
      ##
      subPath: ""

      ## OpenSearch data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS & OpenStack).
      ##
      storageClass: "-"

      # The List of predefined Persistent Volumes for the OpenSearch data. Should be specified as yaml list.
      # OpenSearch nodes take name of these Persistent Volumes in order.
      persistentVolumes: []

      nodes: []

      accessModes:
        - ReadWriteOnce
      size: 5Gi
      annotations: {}

    resources:
      requests:
        cpu: 250m
        memory: 2Gi
      limits:
        cpu: 1
        memory: 4Gi
    javaOpts: "-Xms1024m -Xmx1024m"
    podDisruptionBudget:
      enabled: false
      minAvailable: 1
    readinessProbe: {}
    livenessProbe:
      tcpSocket:
        port: transport
      initialDelaySeconds: 60
      periodSeconds: 20
      failureThreshold: 5
    startupProbe: {}
    imagePullSecrets: []
    nodeSelector: {}
    tolerations: []
    ## Anti-affinity to disallow deploying client and master nodes on the same worker node
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  role: data
    podAnnotations: {}
    customLabels: {}

    # used to assign priority to the OpenSearch data pods
    # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
    priorityClassName: ""

  client:
    enabled: true
    ## Enables dedicated deployment for client/ingest. Otherwise, master nodes as client/ingest
    dedicatedPod:
      enabled: false
    service:
      type: ClusterIP
      annotations: {}
        # # Defined ELB backend protocol as HTTPS to allow connection to OpenSearch API
        # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https

        # # ARN of ACM certificate registered to the deployed ELB for handling connections over TLS
        # # ACM certificate should be issued to the DNS hostname defined earlier (elk.sec.example.com)
        # service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-1:111222333444:certificate/c69f6022-b24f-43d9-b9c8-dfe288d9443d"
        # service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"

        # service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
        # service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "60"
        # service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"

        # # Annotation to create internal only ELB
        # service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
    replicas: 3
    javaOpts: "-Xms512m -Xmx512m"
    ingress:
      ## Set to true to enable ingress record generation
      enabled: false
      annotations: {}
      #  kubernetes.io/tls-acme: "true"
      #  # Depending on your Ingress Controller you may need to set one of the two below annotations to have NGINX call the backend using HTTPS
      #  nginx.org/ssl-services:"{{ template "opensearch.fullname" . }}-client-service"
      className: ""
      labels: {}
      path: /
      hosts: []
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local
    resources:
      limits:
        cpu: 1
        memory: 1024Mi
      requests:
        cpu: 200m
        memory: 1024Mi
    podDisruptionBudget:
      enabled: false
      minAvailable: 1
    readinessProbe: {}
    livenessProbe:
      tcpSocket:
        port: transport
      initialDelaySeconds: 60
      periodSeconds: 20
      failureThreshold: 5
    startupProbe: {}
    imagePullSecrets: []
    nodeSelector: {}
    tolerations: []
    ## Weighted anti-affinity to disallow deploying client node to the same worker node as master node
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  role: client
    podAnnotations: {}
    customLabels: {}

    # used to assign priority to the OpenSearch client pods
    # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
    priorityClassName: ""

  snapshots:
    enabled: false
    repositoryName: "snapshots"
    persistentVolume: ""
    persistentVolumeClaim: ""
    storageClass: ""
    size: 5Gi
    s3:
      enabled: false
      pathStyleAccess: false
      url: ""
      bucket: ""
      keyId: ""
      keySecret: ""
      basePath: ""
      region: ""
      sslSecretName: ""
      sslCert: ""
      gcs:
        secretName: ""
        secretKey: ""

  audit: {}
  config:
    action.auto_create_index: false
    ## Example Config
    plugins.security.allow_unsafe_democertificates: true
    plugins.security.allow_default_init_securityindex: ${ALLOW_SECURITY_INITIALIZATION}
    plugins.security.audit.type: log4j
    plugins.security.audit.config.log4j.level: INFO
    plugins.security.unsupported.restapi.allow_securityconfig_modification: true
    plugins.security.restapi.roles_enabled: ["all_access", "security_rest_api_access"]
    plugins.security.restapi.password_score_based_validation_strength: fair
    plugins.security.nodes_dn:
      - CN=opensearch-node,OU=Opensearch,O=Opensearch,L=Opensearch,C=CA
    # Change it to generated certificate parameters
    plugins.security.authcz.admin_dn:
      - CN=opensearch-admin,OU=Opensearch,O=Opensearch,L=Opensearch,C=CA
      - C=CA,L=Opensearch,O=Opensearch,OU=Opensearch,CN=opensearch-admin
    plugins.security.enable_snapshot_restore_privilege: true
    plugins.security.check_snapshot_restore_write_privileges: true

    path.repo: ["/usr/share/opensearch/snapshots"]

    # cluster.routing.allocation.disk.threshold_enabled: false
    # plugins.security.audit.config.disabled_rest_categories: NONE
    # plugins.security.audit.config..disabled_transport_categories: NONE
    # cluster:
    #   name: ${CLUSTER_NAME}
    # node:
    #   master: ${NODE_MASTER}
    #   data: ${NODE_DATA}
    #   name: ${NODE_NAME}
    #   ingest: ${NODE_INGEST}
    #   max_local_storage_nodes: 1
    #   attr.box_type: hot

    # processors: ${PROCESSORS:1}

    # network.host: ${NETWORK_HOST}

    # thread_pool.bulk.queue_size: 800

    # path:
    #   data: /usr/share/opensearch/data
    #   logs: /usr/share/opensearch/logs

    # http:
    #   enabled: ${HTTP_ENABLE}
    #   compression: true

    # discovery:
    #   zen:
    #     ping.unicast.hosts: ${DISCOVERY_SERVICE}
    #     minimum_master_nodes: ${NUMBER_OF_MASTERS}

    # TLS Configuration Transport Layer
    plugins.security.ssl.transport.pemcert_filepath: transport-crt.pem
    plugins.security.ssl.transport.pemkey_filepath: transport-key.pem
    plugins.security.ssl.transport.pemtrustedcas_filepath: transport-root-ca.pem
    plugins.security.ssl.transport.enforce_hostname_verification: false

    # TLS Configuration REST Layer
    plugins.security.ssl.http.enabled: ${TLS_ENABLED}
    plugins.security.ssl.http.pemcert_filepath: rest-crt.pem
    plugins.security.ssl.http.pemkey_filepath: rest-key.pem
    plugins.security.ssl.http.pemtrustedcas_filepath: rest-root-ca.pem

    # TLS Configuration Transport Layer truststore
    plugins.security.ssl.transport.truststore_filepath: cacerts

  log4jConfig: {}

  loggingConfig:
    ## Default config
    ## you can override this using by setting a system property, for example -Des.logger.level=DEBUG
    es.logger.level: INFO
    rootLogger: ${es.logger.level}, console
    logger:
      ## log action execution errors for easier debugging
      action: DEBUG
      ## reduce the logging for aws, too much is logged under the default INFO
      com.amazonaws: WARN
    appender:
      console:
        type: console
        layout:
          type: consolePattern
          conversionPattern: "[%d{ISO8601}][%-5p][%-25c] %m%n"

  transportKeyPassphrase:
    enabled: false
    passPhrase: ""

  sslKeyPassphrase:
    enabled: false
    passPhrase: ""

  maxMapCount: 262144

  dockerImage: ghcr.io/netcracker/qubership-docker-opensearch:1.14.21
  dockerTlsInitImage: ghcr.io/netcracker/qubership-opensearch-tls-init:1.14.21
  ## Specifies the image pull policy. Can be "Always" or "IfNotPresent" or "Never".
  ## Default to "Always".
  imagePullPolicy: ""

  configDirectory: /usr/share/opensearch/config

  serviceAccount:
    ## Specifies whether a ServiceAccount should be created
    create: true
    ## The name of the ServiceAccount to use.
    ## If not set and create is true, a name is generated using the fullname template
    name: ""

  tlsInit:
    resources:
      requests:
        memory: 128Mi
        cpu: 25m
      limits:
        memory: 128Mi
        cpu: 100m

podScheduler:
  enabled: true
  dockerImage: bitnami/kubectl:1.30.6
  affinity: {}
  nodeSelector: {}
  resources:
    requests:
      cpu: 15m
      memory: 128Mi
    limits:
      cpu: 50m
      memory: 128Mi
  # used to assign priority to the OpenSearch pod scheduler pod
  # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  priorityClassName: ""
  securityContext: {}
#    runAsUser: 1000
  customLabels: {}

monitoring:
  enabled: true
  dockerImage: ghcr.io/netcracker/qubership-opensearch-monitoring:1.14.21
  ## Specifies the image pull policy. Can be "Always" or "IfNotPresent" or "Never".
  ## Default to "Always".
  imagePullPolicy: ""

  monitoringType: "prometheus"
  installDashboard: true
  smDbHost: ""
  smDbName: ""
  smDbUsername: ""
  smDbPassword: ""

  includeIndices: false
  slowQueries:
    enabled: false
    topNumber: 10
    processingIntervalMinutes: 5
    minSeconds: 5
    indicesPattern: "*"
  thresholds:
    lagAlert: -1
    slowQuerySecondsAlert: 10

  opensearchHost: ""
  opensearchPort: 9200
  opensearchExecPluginTimeout: "15s"

  opensearchDbaasAdapterHost: ""
  opensearchDbaasAdapterPort: 8080

  resources:
    requests:
      memory: 256Mi
      cpu: 200m
    limits:
      memory: 256Mi
      cpu: 200m

  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  #
  nodeSelector: {}

  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []

  affinity: {}
  #    podAffinity:
  #      preferredDuringSchedulingIgnoredDuringExecution:
  #        - podAffinityTerm:
  #            labelSelector:
  #              matchExpressions:
  #                - key: component
  #                  operator: In
  #                  values:
  #                    - opensearch
  #            topologyKey: "kubernetes.io/hostname"
  #          weight: 100

  # used to assign priority to the OpenSearch monitoring pod
  # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  priorityClassName: ""

  securityContext: {}

  monitoringCoreosGroup: false
  customLabels: {}

  serviceMonitor:
    clusterStateScrapeInterval: 60s
    clusterStateScrapeTimeout: 30s

# DBaaS adapter based on OpenSearch client
dbaasAdapter:
  enabled: false
  dockerImage: ghcr.io/netcracker/qubership-opensearch-dbaas-adapter:1.14.21
  ## Specifies the image pull policy. Can be "Always" or "IfNotPresent" or "Never".
  ## Default to "Always".
  imagePullPolicy: ""

  dbaasAdapterAddress: ""
  dbaasUsername: ""
  dbaasPassword: ""
  apiVersion: v2

  dbaasAggregatorRegistrationAddress: ""
  dbaasAggregatorPhysicalDatabaseIdentifier: ""
  registrationAuthUsername: ""
  registrationAuthPassword: ""
  physicalDatabasesLabels: {}
  registrationEnabled: false

  opensearchHost: ""
  opensearchPort: 9200
  opensearchProtocol: ""
  opensearchRepo: "snapshots"
  opensearchRepoRoot: "/usr/share/opensearch"
  opensearchClusterVersion: ""
  qubershipOpensearchClusterVersion: ""

  tls:
    enabled: true
    certificates:
      crt: ""
      key: ""
      ca: ""
    secretName: ""
    subjectAlternativeName:
      additionalDnsNames: []
      additionalIpAddresses: []

  resources:
    requests:
      memory: 32Mi
      cpu: 200m
    limits:
      memory: 32Mi
      cpu: 200m

  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  #
  nodeSelector: {}

  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []

  affinity: {}
  #    podAffinity:
  #      preferredDuringSchedulingIgnoredDuringExecution:
  #        - podAffinityTerm:
  #            labelSelector:
  #              matchExpressions:
  #                - key: component
  #                  operator: In
  #                  values:
  #                    - opensearch
  #            topologyKey: "kubernetes.io/hostname"
  #          weight: 100
  #    podAntiAffinity:
  #      requiredDuringSchedulingIgnoredDuringExecution:
  #        - labelSelector:
  #            matchExpressions:
  #              - key: component
  #                operator: In
  #                values:
  #                  - dbaas-opensearch-adapter
  #          topologyKey: "kubernetes.io/hostname"

  # used to assign priority to the OpenSearch DBaaS adapter pod
  # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  priorityClassName: ""

  securityContext: {}

  customLabels: {}

curator:
  enabled: false
  dockerImage: ghcr.io/netcracker/qubership-opensearch-curator:1.14.21
  dockerIndicesCleanerImage: ghcr.io/netcracker/qubership-opensearch-indices-cleaner:1.14.21
  ## Specifies the image pull policy. Can be "Always" or "IfNotPresent" or "Never".
  ## Default to "Always".
  imagePullPolicy: ""

  opensearchHost: ""

  snapshotRepositoryName: ""
  backupSchedule: ""
  evictionPolicy: ""
  username: ""
  password: ""

  tls:
    enabled: true
    certificates:
      crt: ""
      key: ""
      ca: ""
    secretName: ""
    subjectAlternativeName:
      additionalDnsNames: []
      additionalIpAddresses: []

  indicesCleanerSchedulerUnit: ""
  indicesCleanerSchedulerUnitCount: ""
  indicesCleanerConfigurationKey: "patterns_to_delete"
  indicesCleanerConfiguration: []
  #    - filter_direction: older
  #      filter_kind: regex
  #      filter_unit: minutes
  #      filter_unit_count: 1
  #      filter_value: test.*
  #      name: deleteIndicesByPattern

  resources:
    requests:
      memory: 256Mi
      cpu: 200m
    limits:
      memory: 256Mi
      cpu: 200m

  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  #
  nodeSelector: {}

  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []

  affinity: {}
  #    podAffinity:
  #      preferredDuringSchedulingIgnoredDuringExecution:
  #        - podAffinityTerm:
  #            labelSelector:
  #              matchExpressions:
  #                - key: component
  #                  operator: In
  #                  values:
  #                    - opensearch
  #            topologyKey: "kubernetes.io/hostname"
  #          weight: 100

  # used to assign priority to the OpenSearch curator pod
  # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  priorityClassName: ""

  securityContext: {}
  #    runAsUser: 1000
  #    fsGroup: 1000

  customLabels: {}

statusProvisioner:
  enabled: true
  dockerImage: ghcr.io/netcracker/qubership-deployment-status-provisioner:3.3.4
  lifetimeAfterCompletion: 600
  podReadinessTimeout: 800
  crProcessingTimeout: 600
  integrationTestsTimeout: 300
  resources:
    requests:
      memory: "50Mi"
      cpu: "50m"
    limits:
      memory: "100Mi"
      cpu: "100m"
  customLabels: {}
  securityContext: {}

updateResourcesJob:
  resources:
    requests:
      memory: "75Mi"
      cpu: "75m"
    limits:
      memory: "150Mi"
      cpu: "150m"
  securityContext: {}

integrationTests:
  enabled: false
  dockerImage: ghcr.io/netcracker/qubership-opensearch-integration-tests:1.14.21
  statusWritingEnabled: true
  isShortStatusMessage: true
  secrets:
    idp:
      username: ""
      password: ""
      registrationToken: ""
    prometheus:
      user: ""
      password: ""

  tags: "smoke"
  opensearchPort: 9200
  opensearchDbaasAdapterPort: 8080
  identityProviderUrl: ""
  prometheusUrl: ""

  resources:
    requests:
      memory: 256Mi
      cpu: 200m
    limits:
      memory: 256Mi
      cpu: 400m

  affinity: {}
#    podAffinity:
#      preferredDuringSchedulingIgnoredDuringExecution:
#        - podAffinityTerm:
#            labelSelector:
#              matchExpressions:
#                - key: component
#                  operator: In
#                  values:
#                    - opensearch
#            topologyKey: "kubernetes.io/hostname"
#          weight: 100
  customLabels: {}
  securityContext: {}

  # used to assign priority to the OpenSearch integration tests pod
  # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  priorityClassName: ""

nameOverride: "opensearch"
fullnameOverride: "opensearch"

# Cloud Release Integration
# The name of the Service exposed for the database.
SERVICE_NAME: "opensearch-service"
# Microservice belonging to a group
PART_OF: "opensearch-service"
# Delimiter for labels
DELIMITER: "-"
# Artifact descriptor version which is installed.
ARTIFACT_DESCRIPTOR_VERSION: ""  # TO_BE_REPLACED

INFRA_RESTRICTED_ENVIRONMENT: "false"

DEPLOY_W_HELM: "true"
